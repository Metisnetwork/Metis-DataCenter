<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.platon.metis.storage.dao.PowerServerMapper">
  <resultMap id="BaseResultMap" type="com.platon.metis.storage.dao.entity.PowerServer">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="identity_id" jdbcType="VARCHAR" property="identityId" />
    <result column="memory" jdbcType="BIGINT" property="memory" />
    <result column="core" jdbcType="INTEGER" property="core" />
    <result column="bandwidth" jdbcType="BIGINT" property="bandwidth" />
    <result column="used_memory" jdbcType="BIGINT" property="usedMemory" />
    <result column="used_core" jdbcType="INTEGER" property="usedCore" />
    <result column="used_bandwidth" jdbcType="BIGINT" property="usedBandwidth" />
    <result column="published" jdbcType="BIT" property="published" />
    <result column="published_at" jdbcType="TIMESTAMP" property="publishedAt" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="update_at" jdbcType="TIMESTAMP" property="updateAt" />
  </resultMap>
  <sql id="Base_Column_List">
    id, identity_id, memory, core, bandwidth, used_memory, used_core, used_bandwidth, published,
    published_at, status, update_at
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from power_server
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from power_server
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.platon.metis.storage.dao.entity.PowerServer">
    insert into power_server (id, identity_id, memory,
      core, bandwidth, used_memory, 
      used_core, used_bandwidth, published, 
      published_at, status)
    values (#{id,jdbcType=VARCHAR}, #{identityId,jdbcType=VARCHAR}, #{memory,jdbcType=BIGINT},
      #{core,jdbcType=INTEGER}, #{bandwidth,jdbcType=BIGINT}, #{usedMemory,jdbcType=BIGINT}, 
      #{usedCore,jdbcType=INTEGER}, #{usedBandwidth,jdbcType=BIGINT}, #{published,jdbcType=BIT}, 
      #{publishedAt,jdbcType=TIMESTAMP}, #{status,jdbcType=INTEGER})
  </insert>

  <insert id="insertBatch" >
    insert into power_server (id, identity_id, memory,
      core, bandwidth, used_memory,
      used_core, used_bandwidth, published,
      published_at, status)
    values
    <foreach collection ="list" item="item" separator =",">
      (#{item.id,jdbcType=VARCHAR}, #{item.identityId,jdbcType=VARCHAR}, #{item.memory,jdbcType=BIGINT},
        #{item.core,jdbcType=INTEGER}, #{item.bandwidth,jdbcType=BIGINT}, #{item.usedMemory,jdbcType=BIGINT},
        #{item.usedCore,jdbcType=INTEGER}, #{item.usedBandwidth,jdbcType=BIGINT}, #{item.published,jdbcType=BIT},
        #{item.publishedAt,jdbcType=TIMESTAMP}, #{item.status,jdbcType=INTEGER})
    </foreach>
  </insert>

  <update id="updateByPrimaryKeySelective" parameterType="com.platon.metis.storage.dao.entity.PowerServer">
    update power_server
    <set>
      <if test="identityId != null">
        identity_id = #{identityId,jdbcType=VARCHAR},
      </if>
      <if test="memory != null">
        memory = #{memory,jdbcType=BIGINT},
      </if>
      <if test="core != null">
        core = #{core,jdbcType=INTEGER},
      </if>
      <if test="bandwidth != null">
        bandwidth = #{bandwidth,jdbcType=BIGINT},
      </if>
      <if test="usedMemory != null">
        used_memory = #{usedMemory,jdbcType=BIGINT},
      </if>
      <if test="usedCore != null">
        used_core = #{usedCore,jdbcType=INTEGER},
      </if>
      <if test="usedBandwidth != null">
        used_bandwidth = #{usedBandwidth,jdbcType=BIGINT},
      </if>
      <if test="published != null">
        published = #{published,jdbcType=BIT},
      </if>
      <if test="publishedAt != null">
        published_at = #{publishedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        `status` = #{status}
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>

  <resultMap id="BaseResultMap_With_orgName" type="com.platon.metis.storage.dao.entity.PowerServer" extends="BaseResultMap">
    <result column="org_name" property="dynamicFields.orgName" jdbcType="VARCHAR"/>
  </resultMap>

  <select id="syncPowerServer" resultMap="BaseResultMap_With_orgName">
    select ps.*, o.org_name
    from power_server ps
    left join org_info o on ps.identity_id = o.identity_id
    where ps.update_at <![CDATA[ > ]]> #{lastUpdatedAt,jdbcType=TIMESTAMP}
    order by ps.update_at, ps.id
    limit 0, #{limit,jdbcType=BIGINT}
  </select>

  <!-- 算力提供方，即使算力被撤消了，也要返回-->
  <select id="countPowerByOrgId" parameterType="java.lang.String" resultMap="BaseResultMap">
    select sum(core) as core, sum(memory) as memory, sum(bandwidth) as bandwidth, sum(used_core) as used_core, sum(used_memory) as used_memory, sum(used_bandwidth) as used_bandwidth
    from power_server
    where identity_id = #{identityId,jdbcType=VARCHAR}
  </select>

  <resultMap id="OrgPowerTaskSummaryResultMap" type="com.platon.metis.storage.dao.entity.OrgPowerTaskSummary">
    <result column="identity_id" jdbcType="VARCHAR" property="identityId" />
    <result column="memory" jdbcType="BIGINT" property="memory" />
    <result column="core" jdbcType="INTEGER" property="core" />
    <result column="bandwidth" jdbcType="BIGINT" property="bandwidth" />
    <result column="used_memory" jdbcType="BIGINT" property="usedMemory" />
    <result column="used_core" jdbcType="INTEGER" property="usedCore" />
    <result column="used_bandwidth" jdbcType="INTEGER" property="usedBandwidth" />
    <result column="power_task_count" jdbcType="INTEGER" property="powerTaskCount" />
  </resultMap>
  <select id ="listPowerSummaryGroupByOrgId" resultMap="OrgPowerTaskSummaryResultMap">
    select o.identity_id, o.org_name, a.core, a.memory, a.bandwidth, ifnull(a.used_core,0) as used_core, ifnull(a.used_memory,0) as used_memory, ifnull(a.used_bandwidth,0) as used_bandwidth, ifnull(b.power_task_count,0) as power_task_count
    from org_info o
    join (
      select identity_id, sum(core) as core, sum(memory) as memory, sum(bandwidth) as bandwidth, sum(used_core) as used_core, sum(used_memory) as used_memory, sum(used_bandwidth) as used_bandwidth
      from power_server
      where status=2 and (core  <![CDATA[ > ]]> 0 or memory  <![CDATA[ > ]]> 0 or bandwidth  <![CDATA[ > ]]> 0)
      group by identity_id
    ) a on o.identity_id = a.identity_id
    left join (
      select identity_id, count(task_id) as power_task_count
      from task_power_provider
      group by identity_id
    ) b on o.identity_id = b.identity_id
    where o.`status` = 1
  </select>

  <select id ="getPowerSummaryByOrgId" resultMap="OrgPowerTaskSummaryResultMap">
    select o.identity_id, o.org_name, a.core, a.memory, a.bandwidth, ifnull(a.used_core,0) as used_core, ifnull(a.used_memory,0) as used_memory, ifnull(a.used_bandwidth,0) as used_bandwidth, ifnull(b.power_task_count,0) as power_task_count
    from org_info o
    left join (
      select identity_id, sum(core) as core, sum(memory) as memory, sum(bandwidth) as bandwidth, sum(used_core) as used_core, sum(used_memory) as used_memory, sum(used_bandwidth) as used_bandwidth
      from power_server
      where status=2
      group by identity_id
    ) a on o.identity_id = a.identity_id
    left join (
      select identity_id, count(task_id) as power_task_count
      from task_power_provider
      group by identity_id
    ) b on o.identity_id = b.identity_id
    where o.identity_id = #{identityId,jdbcType=VARCHAR}
  </select>


  <update id="updateStatus">
    update power_server
    set status = #{status,jdbcType=INTEGER}
    where id = #{id,jdbcType=VARCHAR}
  </update>
</mapper>
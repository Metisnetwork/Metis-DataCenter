<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.platon.metis.storage.dao.TaskMapper">
  <resultMap id="BaseResultMap" type="com.platon.metis.storage.dao.entity.Task">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="task_name" jdbcType="VARCHAR" property="taskName" />
    <result column="user_id" jdbcType="VARCHAR" property="userId" />
    <result column="user_type" jdbcType="INTEGER" property="userType" />
    <result column="required_memory" jdbcType="BIGINT" property="requiredMemory" />
    <result column="required_core" jdbcType="INTEGER" property="requiredCore" />
    <result column="required_bandwidth" jdbcType="BIGINT" property="requiredBandwidth" />
    <result column="required_duration" jdbcType="BIGINT" property="requiredDuration" />
    <result column="owner_identity_id" jdbcType="VARCHAR" property="ownerIdentityId" />
    <result column="owner_party_id" jdbcType="VARCHAR" property="ownerPartyId" />
    <result column="create_at" jdbcType="TIMESTAMP" property="createAt" />
    <result column="start_at" jdbcType="TIMESTAMP" property="startAt" />
    <result column="end_at" jdbcType="TIMESTAMP" property="endAt" />
    <result column="used_memory" jdbcType="BIGINT" property="usedMemory" />
    <result column="used_core" jdbcType="INTEGER" property="usedCore" />
    <result column="used_bandwidth" jdbcType="BIGINT" property="usedBandwidth" />
    <result column="used_file_size" jdbcType="BIGINT" property="usedFileSize" />
    <result column="status" jdbcType="VARCHAR" property="status" />
    <result column="status_desc" jdbcType="VARCHAR" property="statusDesc" />
    <result column="remarks" jdbcType="VARCHAR" property="remarks" />
    <result column="task_sign" jdbcType="VARCHAR" property="taskSign" />
    <result column="update_at" jdbcType="TIMESTAMP" property="updateAt" />
  </resultMap>
  <sql id="Base_Column_List">
      id, task_name, user_id, user_type, required_memory, required_core, required_bandwidth, required_duration,
    owner_identity_id, owner_party_id, create_at, start_at, end_at, used_memory, used_core, used_bandwidth, used_file_size,
    status, status_desc, remarks, task_sign, update_at
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from task
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from task
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.platon.metis.storage.dao.entity.Task">
    insert into task (id, task_name, user_id, user_type, required_memory,
      required_core, required_bandwidth, required_duration, 
      owner_identity_id, owner_party_id, create_at, start_at,
      end_at, used_memory, used_core, 
      used_bandwidth, used_file_size, status, status_desc, remarks, task_sign, update_at)
    values (#{id,jdbcType=VARCHAR}, #{taskName,jdbcType=VARCHAR}, #{userId,jdbcType=VARCHAR}, #{userType,jdbcType=INTEGER}, #{requiredMemory,jdbcType=BIGINT},
      #{requiredCore,jdbcType=INTEGER}, #{requiredBandwidth,jdbcType=BIGINT}, #{requiredDuration,jdbcType=BIGINT}, 
      #{ownerIdentityId,jdbcType=VARCHAR}, #{ownerPartyId,jdbcType=VARCHAR}, #{createAt,jdbcType=TIMESTAMP}, #{startAt,jdbcType=TIMESTAMP},
      #{endAt,jdbcType=TIMESTAMP}, #{usedMemory,jdbcType=BIGINT}, #{usedCore,jdbcType=INTEGER}, 
      #{usedBandwidth,jdbcType=BIGINT}, #{usedFileSize,jdbcType=BIGINT}, #{status,jdbcType=VARCHAR},
      #{statusDesc,jdbcType=VARCHAR}, #{remarks,jdbcType=VARCHAR}, #{taskSign,jdbcType=VARCHAR},
      CURRENT_TIMESTAMP())
  </insert>

  <insert id="insertBatch">
    insert into task (id, task_name, user_id, user_type, required_memory,
      required_core, required_bandwidth, required_duration,
      owner_identity_id, owner_party_id, create_at, start_at,
      end_at, used_memory, used_core,
      used_bandwidth, used_file_size, status, status_desc, remarks, task_sign, update_at)
    values
    <foreach collection ="list" item="item" separator =",">
    (#{item.id,jdbcType=VARCHAR}, #{item.taskName,jdbcType=VARCHAR}, #{item.userId,jdbcType=VARCHAR}, #{item.userType,jdbcType=INTEGER}, #{item.requiredMemory,jdbcType=BIGINT},
      #{item.requiredCore,jdbcType=INTEGER}, #{item.requiredBandwidth,jdbcType=BIGINT}, #{item.requiredDuration,jdbcType=BIGINT},
      #{item.ownerIdentityId,jdbcType=VARCHAR}, #{item.ownerPartyId,jdbcType=VARCHAR}, #{item.createAt,jdbcType=TIMESTAMP}, #{item.startAt,jdbcType=TIMESTAMP},
      #{item.endAt,jdbcType=TIMESTAMP}, #{item.usedMemory,jdbcType=BIGINT}, #{item.usedCore,jdbcType=INTEGER},
      #{item.usedBandwidth,jdbcType=BIGINT}, #{item.usedFileSize,jdbcType=BIGINT}, #{item.status,jdbcType=VARCHAR},
      #{item.statusDesc,jdbcType=VARCHAR}, #{item.remarks,jdbcType=VARCHAR}, #{item.taskSign,jdbcType=VARCHAR},
      CURRENT_TIMESTAMP())
    </foreach>
  </insert>



  <update id="updateByPrimaryKey" parameterType="com.platon.metis.storage.dao.entity.Task">
    update task
    set task_name = #{taskName,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=VARCHAR},
      user_type = #{userType,jdbcType=INTEGER},
      required_memory = #{requiredMemory,jdbcType=BIGINT},
      required_core = #{requiredCore,jdbcType=INTEGER},
      required_bandwidth = #{requiredBandwidth,jdbcType=BIGINT},
      required_duration = #{requiredDuration,jdbcType=BIGINT},
      owner_identity_id = #{ownerIdentityId,jdbcType=VARCHAR},
      owner_party_id = #{ownerPartyId,jdbcType=VARCHAR},
      create_at = #{createAt,jdbcType=TIMESTAMP},
      start_at = #{startAt,jdbcType=TIMESTAMP},
      end_at = #{endAt,jdbcType=TIMESTAMP},
      used_memory = #{usedMemory,jdbcType=BIGINT},
      used_core = #{usedCore,jdbcType=INTEGER},
      used_bandwidth = #{usedBandwidth,jdbcType=BIGINT},
      used_file_size = #{usedFileSize,jdbcType=BIGINT},
      status = #{status,jdbcType=VARCHAR},
      status_desc = #{statusDesc,jdbcType=VARCHAR},
      remarks = #{remarks,jdbcType=VARCHAR},
      task_sign = #{taskSign,jdbcType=VARCHAR},
      update_at = CURRENT_TIMESTAMP()
    where id = #{id,jdbcType=VARCHAR}
  </update>

  <select id="syncTask" parameterType="java.time.LocalDateTime" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from task
    where update_at > #{lastUpdatedAt,jdbcType=TIMESTAMP}
    order by update_at
  </select>

  <select id="listTaskByIdentityId" parameterType="java.lang.String" resultMap="BaseResultMap">
    select t.*
    from task t
    join (
      select tmp.task_id
      from (
        select tk.owner_identity_id as identity_id, tk.id as task_id, true taskSponsor, false as powerProvider, false as dataProvider, false as resultConsumer, false algoProvider
        from task tk
        WHERE tk.owner_identity_id = #{identityId,jdbcType=VARCHAR}

        union

        select tap.identity_id, tap.task_id, false taskSponsor, false as powerProvider, false as dataProvider, false as resultConsumer, true algoProvider
        from task_algo_provider tap
        WHERE tap.identity_id = #{identityId,jdbcType=VARCHAR}

        union

        select tpp.identity_id, tpp.task_id, false taskSponsor, true as powerProvider, false as dataProvider, false as resultConsumer, false algoProvider
        from task_power_provider tpp
        WHERE tpp.identity_id= #{identityId,jdbcType=VARCHAR}

        union

        select tmd.identity_id, tmd.task_id, false taskSponsor, false as powerProvider, true as dataProvider, false as resultConsumer, false algoProvider
        from task_meta_data tmd
        WHERE tmd.identity_id= #{identityId,jdbcType=VARCHAR}

        union

        select DISTINCT trc.consumer_identity_id as identity_id, trc.task_id, false taskSponsor, false as powerProvider, false as dataProvider, true as resultConsumer, false algoProvider
        from task_result_consumer trc
        WHERE trc.consumer_identity_id = #{identityId,jdbcType=VARCHAR}

      ) tmp
      group by tmp.task_id
    ) temp on t.id = temp.task_id
  </select>

</mapper>
syntax = "proto3";

option go_package = "github.com/datumtechs/datum-network-carrier/pb/datacenter/api";

package datacenter.api;

import "carrier/types/common.proto";
import "carrier/types/identitydata.proto";
import "carrier/types/metadata.proto";


message SaveIdentityRequest {
  carrier.types.IdentityPB information = 1;
}

message RevokeIdentityRequest {
  string identity_id = 1;
}

// add by v0.5.0

message FindIdentityRequest {
  string identity_id = 1;
}
// add by v0.5.0
message FindIdentityResponse {
  int32                     status = 1;     // 响应码
  string                    msg = 2;        // 错误信息
  carrier.types.IdentityPB  identity = 3;   // 组织身份信息
}

message ListIdentityRequest {
  // 同步时间点，用于进行数据增量拉去
  uint64 last_updated = 1;  // 从对应updateAt那条记录开始拉
  uint64 page_size = 2;     // 单次批量数据的返回条数
}

message ListIdentityResponse {
  int32                             status = 1;       // 响应码
  string                            msg = 2;          // 错误信息
  repeated carrier.types.IdentityPB identities = 3;   // 组织身份信息列表
}

// 定义：元数据授权申请记录
message MetadataAuthorityRequest {
  carrier.types.MetadataAuthorityPB metadata_authority = 1;
}

message ListMetadataAuthorityRequest {
  string identity_id = 1;     // 组织标识
  uint64 last_updated = 2;    // 最后同步时间（毫秒级时间戳）
  uint64 page_size = 3;       // 单次批量数据的返回条数
}

message ListMetadataAuthorityResponse {
  int32                                       status = 1;                       // 响应码
  string                                      msg = 2;                          // 错误信息
  repeated carrier.types.MetadataAuthorityPB  metadata_authorities = 3;         // 数据授权信息列表
}

message FindMetadataAuthorityRequest {
  string metadata_auth_id = 1;
}

message FindMetadataAuthorityResponse {
  int32                             status = 1;               // 响应码
  string                            msg = 2;                  // 错误信息
  carrier.types.MetadataAuthorityPB metadata_authority = 3;   // 元数据授权信息
}

// Update Identity Credential request
message UpdateIdentityCredentialRequest {
  string identity_id = 1;
  string credential = 2;
}

// 身份信息服务
service IdentityService {

  // 拉去所有的身份数据
  rpc ListIdentity(ListIdentityRequest) returns (ListIdentityResponse);

  // 存储身份信息（节点用于申请接入网络的基本信息，详细的存于本地）
  rpc SaveIdentity (SaveIdentityRequest) returns (carrier.types.SimpleResponse);

  // 注销准入网络
  rpc RevokeIdentity (RevokeIdentityRequest) returns (carrier.types.SimpleResponse);

  // add by v0.5.0
  rpc FindIdentity (FindIdentityRequest) returns (FindIdentityResponse);
  
  // add by v0.5.0
  // 更新指定组织的credential, 已经设置过的不允许设置
  // 返回码 0-成功  1000-VC不能重复设置
  rpc UpdateIdentityCredential(UpdateIdentityCredentialRequest) returns (carrier.types.SimpleResponse);
}


service MetadataAuthService {

  // v2.0
  // 存储元数据鉴权申请记录
  rpc SaveMetadataAuthority(MetadataAuthorityRequest) returns (carrier.types.SimpleResponse);

  // 数据授权审核，规则：
  // 1、直接进行数据覆盖更新
  rpc UpdateMetadataAuthority(MetadataAuthorityRequest) returns (carrier.types.SimpleResponse);

  // 获取数据授权申请列表
  // 规则：参数存在时根据条件获取，参数不存在时全量返回
  rpc ListMetadataAuthority(ListMetadataAuthorityRequest) returns (ListMetadataAuthorityResponse);

  // FindMetadataAuthority retrieves data based on the specified ID.
  rpc FindMetadataAuthority(FindMetadataAuthorityRequest) returns (FindMetadataAuthorityResponse);
}
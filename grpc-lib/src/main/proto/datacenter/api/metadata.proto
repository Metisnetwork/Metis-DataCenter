syntax = "proto3";

option go_package = "github.com/datumtechs/datum-network-carrier/pb/datacenter/api";
//一个proto文件会生成一个最外部类，里面会包含很多子类，指定这个proto文件生成的类所属的包名
option java_package = "com.platon.datum.storage.grpc.datacenter.api";
//这个proto文件生成会为其中的所有message生成一个最外部类，此配置设置该类类名，如果没有指定此值，则类名为proto文件名的驼峰命名方法
option java_outer_classname = "Metadata";

package datacenter.api;

import "carrier/types/common.proto";
import "carrier/types/identitydata.proto";
import "carrier/types/metadata.proto";


message SaveMetadataRequest {
  carrier.types.MetadataPB metadata = 1;          // metadata 数据实体
}

message RevokeMetadataRequest {
  // 元数据拥有者
  carrier.types.Organization owner = 1;
  string                    metadata_id = 2;
}

message UpdateMetadataRequest {
  carrier.types.MetadataPB metadata = 1;          // metadata 数据实体
}

message ListMetadataSummaryRequest {
  uint64 last_updated = 1;  // 从对应updateAt那条记录开始拉
  uint64 page_size = 2;     // 单次批量数据的返回条数
}

// 获取元数据摘要列表响应参数
message ListMetadataSummaryResponse {
  int32 status = 1;    // 响应码
  string msg = 2;      // 错误信息
  // 摘要信息列表
  repeated MetadataSummaryOwner metadata_summaries = 3;
}

message MetadataSummaryOwner {
  // 元数据的拥有者
  carrier.types.Organization owner = 1;
  // 元文件摘要主体
  carrier.types.MetadataSummary information = 2;
}

// 根据状态获取元数据摘要列表
message ListMetadataSummaryByStateRequest {
  string state = 1;
}

// 根据状态查询元数据摘要列表响应参数
message ListMetadataSummaryByStateResponse {
  repeated MetadataSummaryOwner metadata = 1;
}

/*message Metadata {
    types.Organization     owner                = 1;
    types.MetadataSummary         meta_summary         = 2;
    repeated types.MetadataColumn metadata_columns = 3;
}*/

message ListMetadataRequest {
  uint64 last_updated = 1;  // 从对应updateAt那条记录开始拉
  uint64 page_size = 2;     // 单次批量数据的返回条数
}

message ListMetadataByIdentityIdRequest {
  uint64 last_updated = 1;  // 从对应updateAt那条记录开始拉
  uint64 page_size = 2;     // 单次批量数据的返回条数
  string identityId = 3;
}

message ListMetadataResponse {
  int32 status = 1;    // 响应码
  string msg = 2;      // 错误信息
  repeated carrier.types.MetadataPB metadata = 3;
}

message FindMetadataByIdRequest {
  string metadata_id = 1;
}

message FindMetadataByIdResponse {
  int32 status = 1;    // 响应码
  string msg = 2;      // 错误信息
  carrier.types.MetadataPB metadata = 3;
}

message FindMetadataByIdsRequest {
  repeated string metadata_ids = 1;
}

service MetadataService {

  // 保存元数据
  rpc SaveMetadata (SaveMetadataRequest) returns (carrier.types.SimpleResponse);

  // 查看全部元数据摘要列表 (不包含 列字段描述)，状态为可用
  rpc ListMetadataSummary (ListMetadataSummaryRequest) returns (ListMetadataSummaryResponse);

  // 新增：元数据详细列表（用于将数据同步给管理台，考虑checkpoint同步点位）
  rpc ListMetadata(ListMetadataRequest) returns (ListMetadataResponse);

  // 新增：对应identityId的元数据详细列表（用于将数据同步给管理台，考虑checkpoint同步点位）
  rpc ListMetadataByIdentityId(ListMetadataByIdentityIdRequest) returns (ListMetadataResponse);

  // 新增，根据元数据ID查询元数据详情
  rpc FindMetadataById(FindMetadataByIdRequest) returns (FindMetadataByIdResponse);

  // 新增，根据多个元数据ID查询多个元数据详情 v 0.4.0
  rpc FindMetadataByIds(FindMetadataByIdsRequest) returns (ListMetadataResponse);

  // 撤销元数据 (从底层网络撤销)
  rpc RevokeMetadata (RevokeMetadataRequest) returns (carrier.types.SimpleResponse);

  // 更新已经发布的元数据信息 v 0.4.0
  rpc UpdateMetadata (UpdateMetadataRequest) returns (carrier.types.SimpleResponse);
}

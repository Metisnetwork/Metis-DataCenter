syntax = "proto3";

option go_package = "github.com/datumtechs/datum-network-carrier/pb/datacenter/api";
//一个proto文件会生成一个最外部类，里面会包含很多子类，指定这个proto文件生成的类所属的包名
option java_package = "com.platon.datum.storage.grpc.datacenter.api";
//这个proto文件生成会为其中的所有message生成一个最外部类，此配置设置该类类名，如果没有指定此值，则类名为proto文件名的驼峰命名方法
option java_outer_classname = "Resource";

package datacenter.api;

import "common/constant/carrier_enum.proto";
import "carrier/types/common.proto";
import "carrier/types/identitydata.proto";
import "carrier/types/resourcedata.proto";
import "google/protobuf/empty.proto";

// 发布算力请求参数
message PublishPowerRequest {
  carrier.types.ResourcePB power = 1;
}

message PublishPowerResponse {
  int32  status = 1;
  string msg = 2;
  // 算力id
  string power_id = 3;
}

message RevokePowerRequest {
  // 算力的拥有者
  carrier.types.Organization owner = 1;
  // 算力id
  string power_id = 2;
}

//  总算力摘要
message PowerSummary {
  // 算力实况
  carrier.types.ResourceUsageOverview information = 1;
  // 算力上总共执行的任务数 (已完成的和正在执行的)
  uint32 total_task_count = 2;
  // 算力状态 (create: 还未发布的算力; release: 已发布的算力; revoke: 已撤销的算力)
  common.constant.PowerState state = 3;
}

message PowerSummaryResponse {
  int32 status = 1;    // 响应码
  string msg = 2;      // 错误信息
  // 算力拥有者信息
  carrier.types.Organization owner = 3;
  // 算力总摘要
  PowerSummary power_summary = 4;
}

message ListPowerSummaryResponse {
  int32 status = 1;    // 响应码
  string msg = 2;      // 错误信息
  // 全网的算力总摘要列表
  repeated PowerSummaryResponse powers = 3;
}

message GetPowerSummaryByIdentityRequest {
  // 身份ID
  string identity_id = 1;
}

message ListPowerRequest {
  uint64 last_updated = 1;  // 从对应updateAt那条记录开始拉
  uint64 page_size = 2;     // 单次批量数据的返回条数
}

message ListPowerResponse {
  int32 status = 1;    // 响应码
  string msg = 2;      // 错误信息
  repeated carrier.types.ResourcePB powers  = 3;
}

message SyncPowerRequest {
  carrier.types.LocalResourcePB power = 1;
}

// 资源（算力）接口定义
service ResourceService {

  // 存储资源
  rpc PublishPower (PublishPowerRequest) returns (carrier.types.SimpleResponse);

  // 新增，算力同步，实时通知算力的使用情况（组织下的具体的服务器）
  rpc SyncPower(SyncPowerRequest) returns(carrier.types.SimpleResponse);

  // 撤销资源
  rpc RevokePower (RevokePowerRequest) returns (carrier.types.SimpleResponse);

  // 新增，用于同步给管理台，获取所有算力资源信息
  rpc ListPower(ListPowerRequest) returns (ListPowerResponse);

  // 查看指定组织的总算力摘要
  rpc GetPowerSummaryByIdentityId (GetPowerSummaryByIdentityRequest) returns (PowerSummaryResponse);

  // 查看各个组织的总算力摘要列表 (这个是聚合的摘要, 即: 每个组织的总算力, 所以不需要分页)
  rpc ListPowerSummary (google.protobuf.Empty) returns (ListPowerSummaryResponse);

}

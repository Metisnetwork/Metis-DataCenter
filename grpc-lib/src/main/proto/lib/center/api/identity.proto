syntax = "proto3";

package api;

option go_package = "github.com/RosettaFlow/Carrier-Go/lib/center/api";
option java_multiple_files = true;
option java_package = "com.platon.metis.storage.grpc.lib.api";

import "lib/types/base.proto";
//import "lib/types/identitydata.proto";
import "lib/types/metadata.proto";
//import "google/protobuf/empty.proto";

message SaveIdentityRequest {
  types.Organization member = 1;
  // 节点的身份凭证（DID中的凭证信息）
  string credential = 2;
}

message RevokeIdentityRequest {
  string identity_id = 1;
}

message ListIdentityRequest {
  // 同步时间点，用于进行数据增量拉去
  uint64 last_updated = 1;  // 从对应updateAt那条记录开始拉
  uint64 page_size = 2;     // 单次批量数据的返回条数
}

message ListIdentityResponse {
  repeated types.Organization identities = 1;
}

// 定义：元数据授权申请记录
message MetadataAuthorityRequest {
  types.MetadataAuthorityPB metadata_authority = 1;
}

message ListMetadataAuthorityRequest {
  string identity_id = 1;   // 组织标识
  uint64 last_updated = 2;   // 最后同步时间（毫秒级时间戳）
  uint64 page_size = 3; // 单次批量数据的返回条数
}

message ListMetadataAuthorityResponse {
  repeated types.MetadataAuthorityPB metadata_authorities = 1;          // 数据授权信息列表
}

message FindMetadataAuthorityRequest {
  string metadata_auth_id = 1;
}

message FindMetadataAuthorityResponse {
  types.MetadataAuthorityPB metadata_authority= 1;
}

// 身份信息服务
service IdentityService {

  // 拉去所有的身份数据
  rpc ListIdentity(ListIdentityRequest) returns (ListIdentityResponse);

  // 存储身份信息（节点用于申请接入网络的基本信息，详细的存于本地）
  rpc SaveIdentity (SaveIdentityRequest) returns (types.SimpleResponse);

  // 注销准入网络
  rpc RevokeIdentity (RevokeIdentityRequest) returns (types.SimpleResponse);

  // v2.0
  // 存储元数据鉴权申请记录
  rpc SaveMetadataAuthority(MetadataAuthorityRequest) returns (types.SimpleResponse);

  // 数据授权审核，规则：
  // 1、直接进行数据覆盖更新
  rpc UpdateMetadataAuthority(MetadataAuthorityRequest) returns (types.SimpleResponse);

  // 获取数据授权申请列表
  // 规则：参数存在时根据条件获取，参数不存在时全量返回
  rpc ListMetadataAuthority(ListMetadataAuthorityRequest) returns (ListMetadataAuthorityResponse);

  // FindMetadataAuthority retrieves data based on the specified ID.
  rpc FindMetadataAuthority(FindMetadataAuthorityRequest) returns (FindMetadataAuthorityResponse);
}
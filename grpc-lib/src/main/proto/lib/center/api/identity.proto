syntax = "proto3";

package api;

option go_package = "github.com/RosettaFlow/Carrier-Go/lib/center/api";
option java_multiple_files = true;
option java_package = "com.platon.rosettanet.storage.grpc.lib.api";

import "lib/common/base.proto";
import "lib/types/metadata.proto";

message SaveIdentityRequest {
  api.protobuf.Organization member = 1;
  // 节点的身份凭证（DID中的凭证信息）
  string credential = 2;
}

message RevokeIdentityJoinRequest {
  api.protobuf.Organization member = 1;
}

message IdentityListRequest {
  // 同步时间点，用于进行数据增量拉去
  uint64 last_updated = 1;
}

message IdentityListResponse {
  repeated api.protobuf.Organization identities = 1;
  // 数据的最后更新点（秒级时间戳）
  uint64 last_updated = 2;
}

// 定义：元数据授权申请记录
message SaveMetadataAuthorityRequest {
  string                  user = 1;                            // 发起任务的用户的信息 (task是属于用户的)
  api.protobuf.UserType   user_type = 2;                       // 用户类型 (0: 未定义; 1: 以太坊地址; 2: Alaya地址; 3: PlatON地址)
  types.MetadataAuthority auth = 3;                            // 元数据使用授权信息
  string                  metadata_auth_id = 4;               // 元数据授权申请的ID编号
}

message AuditMetadataAuthorityRequest {
  string                            metadata_auth_id = 1;                  // 元数据授权申请Id
  api.protobuf.AuditMetadataOption  audit = 2;                              // 审核结果
}

message MetadataAuthorityListRequest {
  string identity_id = 1;   // 组织标识
  uint64 last_updated = 2;   // 最后同步时间（秒级时间戳）
}

message MetadataAuthorityDetail {
  string                            metadata_auth_id = 1;                // 元数据授权申请Id
  string                            user = 2;                             // 发起任务的用户的信息 (task是属于用户的)
  api.protobuf.UserType             user_type = 3;                        // 用户类型 (0: 未定义; 1: 以太坊地址; 2: Alaya地址; 3: PlatON地址)
  types.MetadataAuthority           auth = 4;                             // 元数据使用授权信息
  api.protobuf.AuditMetadataOption  audit = 5;                            // 审核结果
  uint64                            apply_at = 6;                         // 发起授权申请的时间 (单位: ms)
  uint64                            audit_at = 7;                         // 审核授权申请的时间 (单位: ms)
}

message MetadataAuthorityListResponse {
  int32                              status = 1;                       // 响应码
  string                             msg = 2;                          // 错误信息
  repeated MetadataAuthorityDetail authorities = 3;                         // 数据授权信息列表
}

// 身份信息服务
service IdentityService {

  // 拉去所有的身份数据
  rpc GetIdentityList(IdentityListRequest) returns (IdentityListResponse);

  // 存储身份信息（节点用于申请接入网络的基本信息，详细的存于本地）
  rpc SaveIdentity (SaveIdentityRequest) returns (api.protobuf.SimpleResponse);

  // 注销准入网络
  rpc RevokeIdentityJoin (RevokeIdentityJoinRequest) returns (api.protobuf.SimpleResponse);

  // v2.0
  // 存储元数据鉴权申请记录
  rpc SaveMetadataAuthority(SaveMetadataAuthorityRequest) returns (api.protobuf.SimpleResponse);

  // 数据授权审核，规则：
  // 1、授权后，可以将审核结果绑定到原有申请记录之上
  rpc AuditMetadataAuthority(AuditMetadataAuthorityRequest) returns (api.protobuf.SimpleResponse);

  // 获取数据授权申请列表
  // 规则：参数存在时根据条件获取，参数不存在时全量返回
  rpc GetMetadataAuthorityList(MetadataAuthorityListRequest) returns (MetadataAuthorityListResponse);
}